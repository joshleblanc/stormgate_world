=begin
#api

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'cgi'

module StormgateWorld
  class PlayersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [PlayerResponse]
    def get_player(player_id, opts = {})
      data, _status_code, _headers = get_player_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlayerResponse, Integer, Hash)>] PlayerResponse data, response status code and response headers
    def get_player_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player"
      end
      # resource path
      local_var_path = '/v0/players/{player_id}'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [MatchResponse]
    def get_player_last_match(player_id, opts = {})
      data, _status_code, _headers = get_player_last_match_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MatchResponse, Integer, Hash)>] MatchResponse data, response status code and response headers
    def get_player_last_match_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_last_match ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player_last_match"
      end
      # resource path
      local_var_path = '/v0/players/{player_id}/matches/last'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player_last_match",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_last_match\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @option opts [Race] :race 
    # @option opts [String] :opponent_player_id 
    # @option opts [Integer] :page 
    # @option opts [Integer] :count 
    # @return [PlayerMatchesResponse]
    def get_player_matches(player_id, opts = {})
      data, _status_code, _headers = get_player_matches_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @option opts [Race] :race 
    # @option opts [String] :opponent_player_id 
    # @option opts [Integer] :page 
    # @option opts [Integer] :count 
    # @return [Array<(PlayerMatchesResponse, Integer, Hash)>] PlayerMatchesResponse data, response status code and response headers
    def get_player_matches_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_matches ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player_matches"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling PlayersApi.get_player_matches, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 0
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling PlayersApi.get_player_matches, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v0/players/{player_id}/matches'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'race'] = opts[:'race'] if !opts[:'race'].nil?
      query_params[:'opponent_player_id'] = opts[:'opponent_player_id'] if !opts[:'opponent_player_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayerMatchesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player_matches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_matches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [PlayerActivityStats]
    def get_player_statistics_activity(player_id, opts = {})
      data, _status_code, _headers = get_player_statistics_activity_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlayerActivityStats, Integer, Hash)>] PlayerActivityStats data, response status code and response headers
    def get_player_statistics_activity_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_statistics_activity ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player_statistics_activity"
      end
      # resource path
      local_var_path = '/v0/players/{player_id}/statistics/activity'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayerActivityStats'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player_statistics_activity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_statistics_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [PlayerMatchupsStats]
    def get_player_statistics_matchups(player_id, opts = {})
      data, _status_code, _headers = get_player_statistics_matchups_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PlayerMatchupsStats, Integer, Hash)>] PlayerMatchupsStats data, response status code and response headers
    def get_player_statistics_matchups_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_statistics_matchups ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player_statistics_matchups"
      end
      # resource path
      local_var_path = '/v0/players/{player_id}/statistics/matchups'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayerMatchupsStats'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player_statistics_matchups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_statistics_matchups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count 
    # @return [PlayerOpponentsStats]
    def get_player_statistics_opponents(player_id, opts = {})
      data, _status_code, _headers = get_player_statistics_opponents_with_http_info(player_id, opts)
      data
    end

    # @param player_id [String] Player ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count 
    # @return [Array<(PlayerOpponentsStats, Integer, Hash)>] PlayerOpponentsStats data, response status code and response headers
    def get_player_statistics_opponents_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.get_player_statistics_opponents ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.get_player_statistics_opponents"
      end
      if @api_client.config.client_side_validation && !opts[:'count'].nil? && opts[:'count'] < 0
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling PlayersApi.get_player_statistics_opponents, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/v0/players/{player_id}/statistics/opponents'.sub('{' + 'player_id' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayerOpponentsStats'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PlayersApi.get_player_statistics_opponents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#get_player_statistics_opponents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
